// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.663
package ui

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import "github.com/montediogo/energydk/src/energy"
import "fmt"

func PricesList(overview energy.PriceOverView) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<script type=\"text/javascript\">\n\n  // Load the Visualization API and the corechart package.\n  google.charts.load('current', {'packages':['corechart']});\n\n  // Set a callback to run when the Google Visualization API is loaded.\n  google.charts.setOnLoadCallback(drawChart);\n\n  // Callback that creates and populates a data table,\n  // instantiates the pie chart, passes in the data and\n  // draws it.\n  function drawChart() {\n\n    var data = google.visualization.arrayToDataTable([\n        ['Element', 'Density', { role: 'style' }],\n        ['Copper', 8.94, '#b87333'],\n        ['Silver', 10.49, 'silver'],\n        ['Gold', 19.30, 'gold'],\n        ['Platinum', 21.45, 'color: #e5e4e2' ],\n    ]);\n\n    var view = new google.visualization.DataView(data);\n    view.setColumns([0, 1,\n                           { calc: \"stringify\",\n                             sourceColumn: 1,\n                             type: \"string\",\n                             role: \"annotation\" },\n                           2]);\n\n    var options = {\n        'title':'Energy',\n        'width':400,\n        'height':300\n    };\n\n    var chart = new google.visualization.ColumnChart(document.getElementById(\"columnchart_values\"));\n    chart.draw(view, options);\n  }\n</script><ul>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for _, item := range overview.AllPrices {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<li>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var2 string
			templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(item.Time)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/ui/prices.templ`, Line: 48, Col: 23}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var3 string
			templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%.2f", item.PriceDkk))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/ui/prices.templ`, Line: 48, Col: 62}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</li>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</ul><div id=\"columnchart_values\" style=\"width: 900px; height: 300px;\"></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}
